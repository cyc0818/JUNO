#!/usr/bin/env python
#-*- coding: utf-8 -*-
#
# Description:
#   This is a tool to dump all the information in EDM file (no split).
# 
# Usage:
#   $ rootio-dump /path/to/edm.root
#   $ rootio-dump -e 10 /path/to/edm.root
#   $ rootio-dump -e 10:12 /path/to/edm.root
#
# Author:
#   Tao Lin <lintao AT ihep.ac.cn>
#

import argparse
import Sniper
import RootIOTools
import BufferMemMgr
import RootIOSvc

def parse_entry_range(ent_string):
    """Parse which entries to print"""
    # copy from podio-dump

    if ent_string is None:
        return None

    try:
        return [int(ent_string)]
    except ValueError:
        pass

    try:
        return [int(i) for i in ent_string.split(',')]
    except ValueError:
        pass
  
    try:
        first, last = [int(i) for i in ent_string.split(':')]
        return list(range(first, last + 1))
    except ValueError:
        pass
  
    raise argparse.ArgumentTypeError(f'\'{ent_string}\' cannot be parsed into a list of entries')

def get_parser():

    parser = argparse.ArgumentParser(description='dump data model file.')
    parser.add_argument('inputfiles', nargs='+', help='Name of the input file')
    parser.add_argument('-e', '--entries', 
                        help='Which entries to print. A single number, comma separated list of numbers'
                        ' or "first:last" for an inclusive range of entries. Defaults to the first entry.',
                        type=parse_entry_range, default=None)

    return parser

if __name__ == '__main__':

    parser = get_parser()
    args = parser.parse_args()
    print(args)

    import Sniper
    task = Sniper.TopTask("task")
    task.setLogLevel(0)
    
    import BufferMemMgr
    bufMgr = task.createSvc("BufferMemMgr")
    
    import RootIOSvc
    import RootIOTools
    inputsvc = task.createSvc("RootInputSvc/InputSvc")
    inputsvc.property("InputFile").set(args.inputfiles)

    dumpalg = task.createAlg("DumpEDMAlg")
    if args.entries:
        dumpalg.property("Entries").set(args.entries)
    
    task.setEvtMax(-1)
    task.show()
    task.run()
